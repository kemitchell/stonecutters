#!/usr/bin/env node
const analyze = require('commonform-analyze')
const commonformCommonmark = require('commonform-commonmark')
const commonmark = require('commonmark')
const ejs = require('ejs')
const fs = require('fs')
const glob = require('glob')
const grayMatter = require('gray-matter')
const hash = require('commonform-hash')
const path = require('path')
const versionCompare = require('legal-versioning-compare')
const rimraf = require('rimraf')
const runParallelLimit = require('run-parallel-limit')
const runSeries = require('run-series')
const spawn = require('child_process').spawn

const BASE_HREF = 'https://stonecutters.law'

const clauses = {}
const templates = {}
const subjects = {}

runSeries([
  readClauses,
  readTemplates,
  checkForConflicts,
  deleteSiteDirectory,
  recreateSiteDirectory,
  copyStaticFiles,
  writeClausePages,
  writeClauseJSON,
  writeAboutPages,
  writeSubjectPages,
  writeHomePage,
  deleteBookDirectory,
  recreateBookDirectory,
  writeBookFiles,
  compileBook
], (error) => {
  if (error) {
    console.error(error)
    process.exit(1)
  }
  process.exit(0)
})

function readClauses (done) {
  glob(path.join('clauses', '*'), (error, clauseDirectories) => {
    if (error) return done(error)
    runSeries(clauseDirectories.map(clauseDirectory => done => {
      const identifier = path.basename(clauseDirectory)
      runSeries([
        readClauseMetadata,
        indexClause,
        readVersions
      ], done)

      function readClauseMetadata (done) {
        fs.readFile(
          path.join(clauseDirectory, 'clause.md'),
          'utf8',
          (error, read) => {
            if (error) return done(error)
            const parts = grayMatter(read)
            clauses[identifier] = {
              identifier,
              title: parts.data.title,
              subjects: parts.data.subjects || [],
              description: parts.content,
              html: renderCommonMark(parts.content),
              versions: {}
            }
            done()
          }
        )
      }

      function indexClause (done) {
        const clauseSubjects = clauses[identifier].subjects
        clauseSubjects.forEach(subject => {
          if (subjects[subject]) {
            subjects[subject].clauses.push(identifier)
          } else {
            subjects[subject] = { clauses: [identifier] }
          }
        })
        done()
      }

      function readVersions (done) {
        glob(path.join(clauseDirectory, '*'), (error, versionDirectories) => {
          if (error) return done(error)
          const versions = versionDirectories
            .filter(directory => !directory.endsWith('clause.md'))
            .map(directory => path.basename(directory))
            .sort((a, b) => versionCompare(b, a))
          const latest = versions[0]
          const onlyVersion = versions.length === 1
          runSeries(versions.map(version => done => {
            if (!clauses[identifier]) {
              clauses[identifier] = {
                identifier,
                versions: {}
              }
            }
            const record = clauses[identifier].versions[version] = {
              spelled: `Version ${version}`
            }
            runSeries([
              readTerms,
              readNotes,
              readCommentary
            ], done)

            function readTerms (done) {
              fs.readFile(
                path.join(clauseDirectory, version, 'terms.md'),
                'utf8',
                (error, read) => {
                  if (error) return done(error)
                  const parts = grayMatter(read)
                  record.title = clauses[identifier].title
                  record.subjects = clauses[identifier].subjects
                    .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))
                    .map(subject => {
                      return {
                        title: subject,
                        slug: subjectToSlug(subject)
                      }
                    })
                  record.identifier = identifier
                  record.version = version
                  record.latest = latest
                  record.onlyVersion = onlyVersion
                  record.permalink = `${BASE_HREF}/${identifier}/${version}`
                  record.versionSpelled = `Version ${version}`
                  record.frontMatter = parts.data || {}
                  record.markup = parts.content.trim()
                  record.parsed = commonformCommonmark.parse(record.markup)
                  record.digest = hash(record.parsed.form)
                  record.termsHTML = renderCommonMark(record.markup)
                  const analysis = analyze(record.parsed.form)
                  const used = Object.keys(analysis.uses)
                  const defined = Object.keys(analysis.definitions)
                  record.notDefined = used.filter(term => !defined.includes(term))
                  done()
                }
              )
            }

            function readNotes (done) {
              readCommonMarkFile('notes.md', 'notes', done)
            }

            function readCommentary (done) {
              readCommonMarkFile('commentary.md', 'commentary', done)
            }

            function readCommonMarkFile (basename, key, done) {
              fs.readFile(
                path.join(clauseDirectory, version, basename),
                'utf8',
                (error, read) => {
                  if (error) {
                    if (error.code === 'ENOENT') {
                      record[key] = false
                      return done()
                    }
                    return done(error)
                  }
                  record[key] = read
                  record[`${key}HTML`] = renderCommonMark(read)
                  done()
                }
              )
            }
          }), done)
        })
      }
    }), done)
  })
}

function deleteSiteDirectory (done) {
  rimraf('site', done)
}

function recreateSiteDirectory (done) {
  runSeries([
    done => fs.mkdir('site', done),
    done => fs.mkdir(path.join('site', 'subjects'), done)
  ], done)
}

function deleteBookDirectory (done) {
  rimraf('book', done)
}

function recreateBookDirectory (done) {
  fs.mkdir('book', done)
}

function readTemplates (done) {
  glob(path.join('templates', '*'), (error, files) => {
    if (error) return done(error)
    runSeries(files.sort().map(file => done => {
      const name = path.basename(file, '.ejs')
      fs.readFile(file, 'utf8', (error, template) => {
        if (error) return done(error)
        templates[name] = ejs.compile(template, {
          filename: file
        })
        done()
      })
    }), done)
  })
}

function checkForConflicts (done) {
  const identifiers = Object.keys(clauses)
  const titles = identifiers.map(identifier => clauses[identifier].title)
  const conflicts = titles.reduce((conflicts, element, index, array) => {
    if (array.indexOf(element) !== index && conflicts.indexOf(element) === -1) {
      conflicts.push(element)
    }
    return conflicts
  }, [])
  if (conflicts.length !== 0) {
    return done(new Error(
      'conflicting clause titles: ' + conflicts.join(', ')
    ))
  }
  done()
}

function copyStaticFiles (done) {
  glob(path.join('static', '*'), (error, files) => {
    if (error) return done(error)
    runParallelLimit(files.map(file => done => {
      const basename = path.basename(file)
      fs.copyFile(file, path.join('site', basename), done)
    }), 3, done)
  })
}

function writeClausePages (done) {
  const identifiers = Object.keys(clauses)
  runSeries(identifiers.map(identifier => done => {
    const versions = Object.keys(clauses[identifier].versions)
      .sort((a, b) => versionCompare(b, a))
    runSeries([
      createDirectory,
      writeIndex,
      writeVersions
    ], done)

    function createDirectory (done) {
      fs.mkdir(path.join('site', identifier), done)
    }

    function writeIndex (done) {
      const record = clauses[identifier]
      writeTemplate(
        'clause',
        {
          identifier,
          title: record.title,
          html: record.html,
          versions: Object.keys(clauses[identifier].versions)
            .sort((a, b) => versionCompare(b, a))
            .map(version => {
              return { code: version, spelled: `Version ${version}` }
            })
        },
        path.join('site', identifier, 'index.html'),
        done
      )
    }

    function writeVersions (done) {
      runParallelLimit(versions.map(version => done => {
        const record = clauses[identifier].versions[version]

        writeTemplate(
          'version',
          record,
          path.join('site', identifier, `${version}.html`),
          done
        )
      }), 3, done)
    }
  }), done)
}

function writeClauseJSON (done) {
  const identifiers = Object.keys(clauses)
  runSeries(identifiers.map(identifier => done => {
    const versions = Object.keys(clauses[identifier].versions)
      .sort((a, b) => versionCompare(b, a))
    runSeries([
      writeIndex,
      writeVersions
    ], done)

    function writeIndex (done) {
      fs.writeFile(
        path.join('site', `${identifier}.json`),
        JSON.stringify({ versions }),
        done
      )
    }

    function writeVersions (done) {
      runParallelLimit(versions.map(version => done => {
        const record = clauses[identifier].versions[version]
        fs.writeFile(
          path.join('site', identifier, `${version}.json`),
          JSON.stringify({
            publisher: 'Stonecutters',
            name: record.title,
            version,
            license: record.frontMatter.license,
            form: record.parsed.form
          }),
          done
        )
      }), 3, done)
    }
  }), done)
}

function writeAboutPages (done) {
  glob(path.join('about', '*.md'), (error, files) => {
    if (error) return done(error)
    runSeries(files.map(file => done => {
      const basename = path.basename(file, '.md')
      fs.readFile(file, 'utf8', (error, read) => {
        if (error) return done(error)
        const parts = grayMatter(read)
        const title = parts.data.title
        const markup = parts.content
        const html = renderCommonMark(markup)
        writeTemplate(
          'about',
          { title, html },
          path.join('site', `${basename}.html`),
          done
        )
      })
    }), done)
  })
}

function writeSubjectPages (done) {
  runParallelLimit(Object.keys(subjects).map(subject => done => {
    writeTemplate(
      'subject',
      {
        subject,
        clauses: subjects[subject].clauses
          .sort()
          .map(identifier => {
            return {
              identifier,
              title: clauses[identifier].title,
              version: Object.keys(clauses[identifier].versions)
                .sort((a, b) => versionCompare(b, a))[0]
            }
          })
      },
      path.join('site', 'subjects', `${subjectToSlug(subject)}.html`),
      done
    )
  }), 3, done)
}

function writeHomePage (done) {
  writeTemplate(
    'homepage',
    {
      clauses: Object.keys(clauses)
        .sort()
        .map(identifier => {
          return {
            identifier,
            title: clauses[identifier].title,
            version: Object.keys(clauses[identifier].versions)
              .sort((a, b) => versionCompare(b, a))[0]
          }
        }),
      subjects: Object.keys(subjects)
        .sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()))
        .map(subject => { return { title: subject, slug: subjectToSlug(subject) } })
    },
    path.join('site', 'index.html'),
    done
  )
}

const bookSources = ['introduction.md']

function writeBookFiles (done) {
  const identifiers = Object.keys(clauses)
  runParallelLimit(identifiers.map(identifier => done => {
    const clauseRecord = clauses[identifier]
    const versions = Object.keys(clauseRecord.versions)
    const chapterFile = path.join('book', `${identifier}.md`)
    bookSources.push(chapterFile)
    versions
      .sort((a, b) => versionCompare(b, a))
      .forEach(version => {
        bookSources.push(sectionFile(identifier, version))
      })
    writeTemplate(
      'chapter',
      clauseRecord,
      chapterFile,
      error => {
        if (error) return done(error)
        runSeries(versions.map(version => done => {
          const record = clauses[identifier].versions[version]
          writeTemplate(
            'entry',
            record,
            sectionFile(identifier, version),
            done
          )
        }), done)
      }
    )
  }), 3, done)
}

function sectionFile (identifier, version) {
  return path.join('book', `${identifier} ${version}.md`)
}

function compileBook (done) {
  const pandoc = spawn('pandoc', [
    '-o', 'book.pdf',
    '-f', 'markdown',
    '--template', path.join('templates', 'book.tex'),
    '--toc',
    '--toc-depth=2',
    '--base-header-level=4',
    '--metadata=title=Stonecutters Catalog'
  ].concat(bookSources))
  const chunks = []
  pandoc.stderr.on('data', chunk => { chunks.push(chunk) })
  pandoc.once('close', code => {
    if (code !== 0) {
      console.error(Buffer.concat(chunks).toString())
      return done(new Error(`pandoc exited with status code ${code}`))
    }
    done()
  })
}

function writeTemplate (templateKey, data, file, done) {
  let html
  try {
    html = templates[templateKey](data)
  } catch (error) {
    return done(error)
  }
  fs.writeFile(file, html, done)
}

function renderCommonMark (markup) {
  const reader = new commonmark.Parser()
  const writer = new commonmark.HtmlRenderer()
  const parsed = reader.parse(markup)
  return writer.render(parsed)
}

function subjectToSlug (subject) {
  return subject
    .toLowerCase()
    .replace(/ /g, '-')
    .replace(/[^A-Za-z0-9-]/g, '')
}

require('assert').equal(subjectToSlug('Test Example'), 'test-example')
